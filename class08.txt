Django高级扩展
    静态文件
        css,js,图片,json文件,字体文件等
        配置settings.py
            STATIC_URL = '/static'
            STATICFILES_DIRS = [
                os.path.join(BASE_DIR, 'static')
            ]

    中间件
        概述：一个轻量级，底层的插件，可以介入Django的请求和响应。
        本质：一个Python类
        方法：
            __init__ 
                不需要传参数，服务器响应第一个请求的时候自动调用，用于确定是否启用该中间件
            process_request(self, request) 
                在执行视图之前被调用(分配url匹配视图之前)，每个请求都会调用，返回None或者HttpResponse对象
            process_view(self, request, view_func. view_args, view_kwargs)
                调用视图之前执行，每个请求都会调用，返回None或者HttpResponse对象
            process_template_response(self, request, response)
                在视图刚好执行完后调用，每个请求都会调用，返回None或者HttpResponse对象
                使用render
            process_response(self, request, response)
                所有响应返回浏览器之前调用，每个请求都会调用，返回HttpResponse对象
            process_exception(self, request, exception)
                当视图抛出异常时调用，返回HttpResponse对象
        执行过程：
            __init__ --> process_request--> url --> process_view --> view --> process_template_response --> template --> process_response -->返回开头部分
         执行位置：
        自定义中间件
            在工程目录下的middleware目录下创建myApp
            创建一个python文件
            from django.utils.deprecation import middlewareMixin
            class MyMiddle(middlewareMixin):
                def process_request(self, request):
                    print("get参数为: ", request.GET.get("a"))
        使用自定义中间件
            配置settings.py文件 在MIDDLEWARE中添加 'middleware.myApp.MyMiddle.MyMiddle',

    上传图片
        概述：
            文件上传时，文件数据request.FILES属性中.
            注意：form表单要上传文件需要加enctype="multipart/form-data"
            注意：上传文件必须用post请求
        存储路径：
            在static目录下创建upfile目录用于存储上传的文件
            配置settings.py文件 MDEIA_ROOT = os.path.join(BASE_DIR, r'static\upfile')

views.py内容
==============================================================================
def upfile(request):
    return render(request, 'myApp/upfile.html')

import os
from django.conf import settings
def savefile(request):
    if request.method == "POST":
        f = request.FILES["file"]
        # 文件在服务器端的路径
        filePath = os.pasth.join(settings.MDEIA_ROOT, f.name)
        with open(filePath, 'wb') as fp:
            for info in f.chunks():
                fp.write(info)
        return HttpResponse("上传成功。")
    else:
        return HttpResponse("上传失败。")
==============================================================================
upfile.html中<body>里的内容
<body>
    <form method="post" action="/savefile" enctype="multipart/form-data">
        {%csrf_token%}
        <input type="file" name="file"/>
        <input type="submit" value="上传"/>
    </form>
</body>
==============================================================================

    分页
        Paginator对象
            创建对象
                格式 Paginator(列表,整数)
                返回值 返回的分页对象
            属性
                count 对象总数
                num_pages 页面总数
                page_range
                    页码列表
                    [1,2,3,4,5]
                    页码从1开始
            方法
                page(num) 获得一个Page对象，如果提供的页码不存在会抛出"InvalidPage"异常
            异常
                InvalidPage:当向 page()传递的是一个无效的页码时抛出
                PageNotAnInteger:当向 page()传递的不是一个整数时抛出
                EmptyPage:当向 page()传递一个有效值，但是该页面里没有数据时抛出
        Page对象
            创建对象
                Paginator对象的 page()方法返回得到Page对象
                不需要手动创建
            属性
                object_list:当前页上所有数据(对象)列表
                number:当前页面的页码值
                paginator:当前page对象关联的paginator对象
            方法
                has_next() 判断是否有下一页，如果有返回 True
                has_previous() 判断是否有上一页，如果有返回 True
                has_other_pages() 判断是否有上一页或者下一页，如果有返回 True
                next_page_number() 返回下一页的页码，如果下一页不存在抛出InvalidPage异常
                previous_page_number() 返回上一页的页码，如果上一页不存在，抛出InvalidPage异常
                len() 返回当前页的数据（对象）个数

        Paginator与Page对象关系(略)
        代码示例：
        配置路由：url(r'^studentpage/(\d+)/$', views.studentpage),
        配置视图：
            from .models import Students
            from django.core.paginator import Paginator
            def studentpage(request, pageid):
                # 所有学生列表
                allList = Students.objects.all()
                paginator = Paginator(allList, 6)
                page = paginator.page(pageid)
                return render(request, 'myApp/studentpage.html', {"students": page})
        配置html
        studentpage.html中body标签中的内容：
            <body>
                <ul>
                    {% for stu in students %}
                    <li>
                        {{stu.sname}}--{{stu.sgrade}}
                    </li>
                    {% endfor %}
                </ul>
                <ul>
                    {% for index in students.paginator.page_range %}
                        {% if index == students.number %}
                            <li>
                                {{index}}
                            </li>
                        {% else %}
                            <li>
                                <a href="/sunck/studentpage/{{index}}">{{index}}</a>
                            </li>
                        {% endif %}
                    {% endif%}
                </ul>
            </body>
==============================================================================

    ajax
        需要动态生成，请求JSON数据
    代码示例
        ajaxstudents.html页面示例
        <script type="text/javascript" src="/static/myApp/js/jquery-3.1.1.min.js"></script>
        <body>
            <h1>学生信息列表</h1>
            <button id="btn">显示学生信息</button>
            <script type="text/javascript" src="/static/myApp/js/sunck.js"></script>
        </body>

        sunck.js代码示例
        $(document).ready(function (){
            document.getElementById("btn").onclick = function (){
                $.ajax({
                    type:"get",
                    url:"/studentsinfo/",
                    dataType:"json",
                    success:function(data, status){
                        console.log(data)
                        var d = data["data"]
                        for(var i=0; i<d.length; i++){
                            document.write('<p>' + d[i][0] + '</p>')
                        }
                    }
                })
            }
        })

        views.py代码示例
        def ajaxstudents(request):
            return render(request, 'myApp/ajaxstudents.html')

        from django.http import JsonResponse
        def studentsinfo(request):
            stus = Students.objects.all()
            list = []
            for stu in stus:
                list.append([stu.sname, stu.sage])
            return JsonResponse({"data":list})
==============================================================================

    富文本
        pip install django-tinymce
        在站点中使用
            配置settings.py文件
                INSTALLED_APPS 列表中添加 'tinymce',
                增加    
                    # 富文本
                    TINYMCE_DEFAULT_CONFIG = {
                        'theme':'advanced',
                        'width':600,
                        'height':400,
                    }
            创建一个模型类：
                在models.py文件中增加
                from tinymce.models import HTMLField
                class Text(models.Model):
                    str = HTMLField()
            配置站点：
                from .models import Text
                admin.site.register(Text)
        
        自定义视图使用
            <head>
                <meta charset="UTF-8">
                <title>富文本</title>
                <script type="text/javascript" src="/static/tiny_mce/tiny_mce.js"></script>
                <script type="text/javascript">
                    tinyMCE.init({
                        'mode':'textareas',
                        'theme':'advanced',
                        'width':'800',
                        'height':'600',
                        })
                </script>
            </head>
            <body>
                <form action="/saveedit/" method="post">
                    <textarea name="str">sunck is a good man</textarea>
                    <input type="submit" value="提交"/>
                </form>
            </body>

        Celery
            http://docs.jinkan.org/docs/celery/
            问题：
                用户发起request,并且要等待response返回，但在视图中有一些耗时的操作，
                导致用户可能会等待很长时间才能接收response，这样用户体验很差
                网站每隔一段时间要同步一次数据，但是http请求是需要触发的
            解决：
                celery来解决
                    将耗时的操作放在celery中执行
                    使用celery定时执行
            celery:
                任务task
                    本质是一个Python函数，将耗时的操作封装成一个函数
                队列queue
                    将要执行的任务放在队列里
                工人worker
                    负责执行对列中的任务
                代理broker
                    负责高度，在部署环境中使用redis
            安装：
                pip install celery
                pip install celery-with-redis
                pip install django-celery
            配置settings.py
                在INSTALLED_APPS 列表中添加 'djcelery',
                # Celery
                import djcelery
                djcelery.setup_loader() # 初始化
                BROKER_URL='redis://:sunck@127.0.0.1:6379/0'
                CELERY_IMPORTS=('myApp.task')
            在应用目录下创建task.py文件
            迁移生成celery需要的数据库表：python manage.py migrate
            在工程目录下的project目录下创建celery.py文件
                celery.py文件全部内容
                from __future__ import absolute_import

                import os
                from celery import Celery
                from django.conf import settings

                os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'whthas_home.settings')

                app = Celery('portal')

                app.config_from_object('django.conf:settings')
                app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)


                @app.task(bind=True)
                def debug_task(self):
                    print('request: {0!r}'.format(self.request))
            在工程目录下的 project目录下的 __init__.py文件中添加
